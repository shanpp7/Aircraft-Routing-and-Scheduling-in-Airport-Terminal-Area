import math
saveDistance = 100

turningTime = 15

bidirection = {}  # Store the occupancy schedule for both sides

r15_33 = ['P_565_1', 'P_563_1','P_572_1', 'P_575_1','P_1297_1', 'P_1299','P_1375_1']
r16_34 = ['P_5_1', 'P_11','P_1110_1', 'P_1118']


runwayType1 = ['P_626', 'P_633', 'P_634', 'P_611', 'P_610', 'P_609', 'P_608', 'P_607', 'P_606', 'P_604', 'P_605',
               'P_603', 'P_602', 'P_601', 'P_600', 'P_599', 'P_598', 'P_597', 'P_596', 'P_595', 'P_594', 'P_682',
               'P_681', 'P_680', 'P_679', 'P_678', 'P_677', 'P_695', 'P_693', 'P_694', 'P_688', 'P_687', 'P_685',
               'P_686', 'P_658', 'P_659', 'P_660', 'P_661', 'P_662', 'P_663', 'P_664', 'P_665', 'P_666', 'P_698',
               'P_699', 'P_726', 'P_725', 'P_724', 'P_723', 'P_722', 'P_721', 'P_720', 'P_704', 'P_703', 'P_702',
               'P_728', 'P_727', 'P_905', 'P_715', 'P_716', 'P_717', 'P_733', 'P_734', 'P_735', 'P_736', 'P_737',
               'P_738', 'P_739', 'P_740', 'P_741', 'P_742', 'P_850', 'P_849', 'P_848', 'P_847', 'P_864', 'P_863',
               'P_862', 'P_861', 'P_860', 'P_859', 'P_858', 'P_857', 'P_856', 'P_854', 'P_835', 'P_832', 'P_831',
               'P_828', 'P_827', 'P_824', 'P_823', 'P_820', 'P_819', 'P_928', 'P_935', 'P_939', 'P_965', 'P_945',
               'P_946', 'P_953', 'P_957', 'P_780', 'P_787', 'P_791', 'P_796', 'P_797', 'P_802', 'P_1528', 'P_1529',
               'P_1189', 'P_1190', 'P_1192', 'P_1193', 'P_1207', 'P_1208', 'P_1523', 'P_1522', 'P_1205', 'P_1204',
               'P_1203', 'P_1239', 'P_1240', 'P_1273', 'P_1272', 'P_1426', 'P_1425', 'P_1427', 'P_1403', 'P_1402',
               'P_1521', 'P_1478', 'P_1235', 'P_1244', 'P_1255', 'P_1261', 'P_1268', 'P_1278', 'P_1418', 'P_1406',
               'P_1399', 'P_1443', 'P_1448', 'P_1419', 'P_1416', 'P_1417', 'P_1407', 'P_1398', 'P_1397', 'P_1442',
               'P_1480', 'P_1483', 'P_1485', 'P_1486', 'P_1511', 'P_1510', 'P_1509', 'P_1508', 'P_1479', 'P_1481',
               'P_1482', 'P_1484', 'P_1452', 'P_1453', 'P_1454', 'P_1455', 'P_1498', 'P_1499']

runwayType0 = ['P_1368', 'P_1367', 'P_1366', 'P_1365', 'P_1364', 'P_1363', 'P_1362', 'P_1361', 'P_1360', 'P_1359',
               'P_1358', 'P_1357', 'P_1356', 'P_1355', 'P_1354', 'P_1353', 'P_1352', 'P_1351', 'P_1350', 'P_1349',
               'P_1348', 'P_1347', 'P_1346', 'P_1345', 'P_1344', 'P_1343', 'P_1342', 'P_1005', 'P_1004', 'P_1003',
               'P_88', 'P_87', 'P_86', 'P_89', 'P_90', 'P_91', 'P_92', 'P_93', 'P_94', 'P_95', 'P_96', 'P_97', 'P_98',
               'P_99', 'P_100', 'P_101', 'P_102', 'P_103', 'P_104', 'P_105', 'P_106', 'P_107', 'P_108', 'P_109',
               'P_110', 'P_111', 'P_112', 'P_117', 'P_118', 'P_119', 'P_319', 'P_320', 'P_321', 'P_318', 'P_317',
               'P_1138', 'P_322', 'P_199', 'P_198', 'P_197', 'P_196', 'P_195', 'P_313', 'P_312', 'P_311', 'P_310',
               'P_309', 'P_308', 'P_307', 'P_306', 'P_305', 'P_304', 'P_303', 'P_302', 'P_301', 'P_300', 'P_299',
               'P_412', 'P_411', 'P_410', 'P_409', 'P_408', 'P_407', 'P_406', 'P_405', 'P_404', 'P_403', 'P_200',
               'P_201', 'P_202', 'P_204', 'P_205', 'P_206', 'P_207', 'P_263', 'P_264', 'P_265', 'P_266', 'P_267',
               'P_268', 'P_269', 'P_270', 'P_271', 'P_273', 'P_273', 'P_274', 'P_275', 'P_276', 'P_277', 'P_278',
               'P_279', 'P_280', 'P_298', 'P_297', 'P_1130', 'P_1129', 'P_1128', 'P_1127', 'P_1124', 'P_1125', 'P_1126',
               'P_1131', 'P_1132', 'P_1046', 'P_1045', 'P_1044', 'P_229', 'P_230', 'P_231', 'P_232', 'P_80', 'P_531',
               'P_528', 'P_528', 'P_529', 'P_532', 'P_532', 'P_533', 'P_534', 'P_535', 'P_536', 'P_58', 'P_57', 'P_56',
               'P_55', 'P_54', 'P_53', 'P_52', 'P_521', 'P_520', 'P_518', 'P_517', 'P_1014', 'P_1015', 'P_134', 'P_133',
               'P_132', 'P_127', 'P_123', 'P_122', 'P_124', 'P_69', 'P_70']
# Runway departure release interval
def timeDistanceOnRunWay(pretype, nextype):
    if pretype == 0:
        return 90
    if pretype == 1:
        if nextype == 0:
            return 120
        else:
            return 90
    if pretype == 2:
        if nextype == 2:
            return 120
        else:
            return 180
# If the included Angle is greater than 150 degrees, the task is not an inflection point and returns 0; otherwise, it is considered a bend and returns 10
def TurningTime(point1, point2, point3):
    x1 = point1.X
    x2 = point2.X
    x3 = point3.X
    y1 = point1.Y
    y2 = point2.Y
    y3 = point3.Y
    a1 = x1 - x2
    a2 = y1 - y2
    b1 = x3 - x2
    b2 = y3 - y2
    d = a1 * b1 + a2 * b2
    l1 = math.sqrt(a1 ** 2 + a2 ** 2) 
    l2 = math.sqrt(b1 ** 2 + b2 ** 2) 
    cos_angle = d / (l1 * l2)
    angle_rad = math.acos(cos_angle)
    angle_deg = math.degrees(angle_rad)

    if (angle_deg > 150):
        return 0
    else:
        return turningTime